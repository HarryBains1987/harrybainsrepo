// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarvelAPI
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CharacterTests")]
    public partial class CharacterTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CharacterTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CharacterTests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check all Character records include all properties")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("100", null)]
        [NUnit.Framework.TestCaseAttribute("200", null)]
        [NUnit.Framework.TestCaseAttribute("300", null)]
        [NUnit.Framework.TestCaseAttribute("400", null)]
        [NUnit.Framework.TestCaseAttribute("500", null)]
        [NUnit.Framework.TestCaseAttribute("600", null)]
        [NUnit.Framework.TestCaseAttribute("700", null)]
        [NUnit.Framework.TestCaseAttribute("800", null)]
        [NUnit.Framework.TestCaseAttribute("900", null)]
        [NUnit.Framework.TestCaseAttribute("1000", null)]
        [NUnit.Framework.TestCaseAttribute("1100", null)]
        [NUnit.Framework.TestCaseAttribute("1200", null)]
        [NUnit.Framework.TestCaseAttribute("1300", null)]
        [NUnit.Framework.TestCaseAttribute("1400", null)]
        public virtual void CheckAllCharacterRecordsIncludeAllProperties(string offsetValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check all Character records include all properties", null, exampleTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Limit",
                            "Offset",
                            "ApiKey",
                            "Hash"});
                table1.AddRow(new string[] {
                            "100",
                            string.Format("{0}", offsetValue),
                            "7c293d204a400b5b800082b24556f517",
                            "cf0c222786270002e62ccbc2ebf1ed86"});
#line 6
  testRunner.Given("I make a get call to the Characters API", ((string)(null)), table1, "Given ");
#line hidden
#line 9
  testRunner.Then("I receive a success response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
  testRunner.And("verify every record includes all JSON properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative tests authorisation validation")]
        [NUnit.Framework.TestCaseAttribute("7c293d204a400b5b8082b7", "cf0c222786270002e62ccbc2ebf1ed86", "Unauthorized", "InvalidCredentials", "The passed API key is invalid.", null)]
        [NUnit.Framework.TestCaseAttribute("7c293d204a400b5b800082b24556f517", "cf0c2227862700022ccbc2ebf1ed86", "Unauthorized", "InvalidCredentials", "That hash, timestamp and key combination is invalid.", null)]
        public virtual void NegativeTestsAuthorisationValidation(string apiKey, string hash, string errorResponse, string code, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative tests authorisation validation", null, exampleTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Limit",
                            "Offset",
                            "ApiKey",
                            "Hash"});
                table2.AddRow(new string[] {
                            "100",
                            "0",
                            string.Format("{0}", apiKey),
                            string.Format("{0}", hash)});
#line 31
 testRunner.Given("I make a get call to the Characters API", ((string)(null)), table2, "Given ");
#line hidden
#line 34
 testRunner.Then(string.Format("I receive a {0} response with {1} and Error {2}", errorResponse, code, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative tests pagination validation")]
        [NUnit.Framework.TestCaseAttribute("0", "Conflict", "409", "You must pass an integer limit greater", null)]
        public virtual void NegativeTestsPaginationValidation(string limitValue, string errorResponse, string code, string status, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative tests pagination validation", null, exampleTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Limit",
                            "Offset",
                            "ApiKey",
                            "Hash"});
                table3.AddRow(new string[] {
                            string.Format("{0}", limitValue),
                            "0",
                            "7c293d204a400b5b800082b24556f517",
                            "cf0c222786270002e62ccbc2ebf1ed86"});
#line 42
 testRunner.Given("I make a get call to the Characters API", ((string)(null)), table3, "Given ");
#line hidden
#line 45
 testRunner.Then(string.Format("I receive a {0} response with {1} and Status Message {2}", errorResponse, code, status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
